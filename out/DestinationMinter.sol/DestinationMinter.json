{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "MintCallSuccessfull",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a0346100ad57601f6104cf38819003918201601f19168301916001600160401b038311848410176100b25780849260409485528339810103126100ad57610052602061004b836100c8565b92016100c8565b6001600160a01b039180831615610094576080521660018060a01b031960005416176000556040516103f290816100dd82396080518181816059015260ce0152f35b6040516335fdcccd60e21b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100ad5756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146102cb5750816385572ffb1461008c575063b0f479a11461004657600080fd5b34610088578160031936011261008857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b839150346100885760209060031982813601126102c75781359167ffffffffffffffff918284116102c35760a09084360301126102bf576001600160a01b03957f0000000000000000000000000000000000000000000000000000000000000000871633036102a85780519160a083018381108582111761029557825284810135835260249384860135818116810361028d5787850152604486013581811161028d5761013e9083369189010161037a565b83850152606486013581811161028d5761015d9083369189010161037a565b95606085019687526084810135908282116102915701913660238401121561028d57808301359180831161027b57610199898460051b01610322565b96808a89868152019460061b86010194368611610277578101935b85851061022457508a80808c8f828e918e60808f015281541691519283519301915af13d1561021f576101ee6101e93d61035e565b610322565b505b1561021c577fa8bcb6a278444293ea5c0bce4a4734a060a5f557bb999d8a57c4f69e96f1fe888180a180f35b80fd5b6101f0565b8685360312610277578651878101818110858211176102655788528535808f168103610261578152858c01358c8201528152938601938a016101b4565b8d80fd5b634e487b7160e01b8e5260418652838efd5b8b80fd5b634e487b7160e01b8a5260418252868afd5b8880fd5b8980fd5b634e487b7160e01b885260418252602488fd5b6024925051906335fdcccd60e21b82523390820152fd5b8480fd5b8580fd5b8380fd5b84913461031e57602036600319011261031e573563ffffffff60e01b811680910361031e57602092506385572ffb60e01b811490811561030d575b5015158152f35b6301ffc9a760e01b14905083610306565b8280fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761034857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161034857601f01601f191660200190565b81601f820112156103b7578035906103946101e98361035e565b92828452602083830101116103b757816000926020809301838601378301015290565b600080fdfea2646970667358221220ecb316039e681cbf0cb0d7cc2bdf98d4f75b2174396557a6c39753f8d3f4355464736f6c63430008130033",
    "sourceMap": "454:437:103:-:0;;;;;;;;;;;;;-1:-1:-1;;454:437:103;;;;-1:-1:-1;;;;;454:437:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;454:437:103;;;;532:20:47;528:58;;592:17;;454:437:103;;;;;;;-1:-1:-1;454:437:103;;;-1:-1:-1;454:437:103;;;;;;;;;592:17:47;454:437:103;;;;;;;;;;;528:58:47;454:437:103;;-1:-1:-1;;;561:25:47;;-1:-1:-1;561:25:47;;;454:437:103;;;561:25:47;454:437:103;-1:-1:-1;454:437:103;;;;;;-1:-1:-1;454:437:103;;;;;-1:-1:-1;454:437:103;;;;-1:-1:-1;;;;;454:437:103;;;;;;:::o",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146102cb5750816385572ffb1461008c575063b0f479a11461004657600080fd5b34610088578160031936011261008857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b839150346100885760209060031982813601126102c75781359167ffffffffffffffff918284116102c35760a09084360301126102bf576001600160a01b03957f0000000000000000000000000000000000000000000000000000000000000000871633036102a85780519160a083018381108582111761029557825284810135835260249384860135818116810361028d5787850152604486013581811161028d5761013e9083369189010161037a565b83850152606486013581811161028d5761015d9083369189010161037a565b95606085019687526084810135908282116102915701913660238401121561028d57808301359180831161027b57610199898460051b01610322565b96808a89868152019460061b86010194368611610277578101935b85851061022457508a80808c8f828e918e60808f015281541691519283519301915af13d1561021f576101ee6101e93d61035e565b610322565b505b1561021c577fa8bcb6a278444293ea5c0bce4a4734a060a5f557bb999d8a57c4f69e96f1fe888180a180f35b80fd5b6101f0565b8685360312610277578651878101818110858211176102655788528535808f168103610261578152858c01358c8201528152938601938a016101b4565b8d80fd5b634e487b7160e01b8e5260418652838efd5b8b80fd5b634e487b7160e01b8a5260418252868afd5b8880fd5b8980fd5b634e487b7160e01b885260418252602488fd5b6024925051906335fdcccd60e21b82523390820152fd5b8480fd5b8580fd5b8380fd5b84913461031e57602036600319011261031e573563ffffffff60e01b811680910361031e57602092506385572ffb60e01b811490811561030d575b5015158152f35b6301ffc9a760e01b14905083610306565b8280fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761034857604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161034857601f01601f191660200190565b81601f820112156103b7578035906103946101e98361035e565b92828452602083830101116103b757816000926020809301838601378301015290565b600080fdfea2646970667358221220ecb316039e681cbf0cb0d7cc2bdf98d4f75b2174396557a6c39753f8d3f4355464736f6c63430008130033",
    "sourceMap": "454:437:103:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1618:8:47;-1:-1:-1;;;;;454:437:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;454:437:103;1786:8:47;454:437:103;;1764:10:47;:31;1760:69;;454:437:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;807:12;;789:31;;;;;;;;454:437;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;861:21;;;;454:437;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;454:437:103;;;;;;;;;;;;;-1:-1:-1;;;454:437:103;;;;;;;;;;;;;;;;;-1:-1:-1;;;454:437:103;;;;;;;;1760:69:47;454:437:103;;;;1804:25:47;;;;;;1764:10;1804:25;;;454:437:103;1804:25:47;454:437:103;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;454:437:103;;;;;;;;;;;;;;;;;-1:-1:-1;;;;861:56:47;;;:100;;;;454:437:103;;;;;;;861:100:47;-1:-1:-1;;;921:40:47;;-1:-1:-1;861:100:47;;;454:437:103;;;;;;;;;;;-1:-1:-1;;454:437:103;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;454:437:103;;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;454:437:103;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;454:437:103;",
    "linkReferences": {},
    "immutableReferences": {
      "36243": [
        {
          "start": 89,
          "length": 32
        },
        {
          "start": 206,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": "85572ffb",
    "getRouter()": "b0f479a1",
    "supportsInterface(bytes4)": "01ffc9a7"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintCallSuccessfull\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"i_router address\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/cross-chain-nft-minter/DestinationMinter.sol\":\"DestinationMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink-testing/=lib/foundry-chainlink-toolkit/lib/chainlink-testing-framework/contracts/ethereum/\",\":@chainlink/contracts-ccip/=node_modules/@chainlink/contracts-ccip/\",\":@chainlink/contracts/=node_modules/@chainlink/contracts/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/\",\":chainlink-testing-framework/=lib/foundry-chainlink-toolkit/lib/chainlink-testing-framework/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53445dc0431f9b45c06f567c6091da961d4087bec0010cca5bd62100fa624a38\",\"dweb:/ipfs/QmNvBYpBv183czrAqNXr76E8M3LF93ouAJFeAcHfb59Rcx\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb\",\"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol\":{\"keccak256\":\"0x57a2cf3544afc13eba3ad57a4f71d229da29f13ad9c365f31eda05e26a5f810c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06c7ba983e1c10b02070776f07495cd28906570923290f193fad3f127d8ecb64\",\"dweb:/ipfs/Qmdb7sqnyafGzbdnzx7GVutiHyMQH9WpKu581sjpCXkwJb\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\":{\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbfaf37123958822a2720a4ea29651be00edab787540b770f73d3e025d286ff8\",\"dweb:/ipfs/QmbzgWeTm8hJVUqWrNAwFjshqbYVyeGpQA8D1huzxQdmw6\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xe986ce7671ef4d92b15c9787b48f6cd6688913e8bf595ebc9c094efd8594b7c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://490a886c899c11eae93a3d45cfc071058d7009885b645ff552c302aed0b4abbf\",\"dweb:/ipfs/Qma5gTgcbZ4BJjJMWPFDw5c7a6BDDJhUgMF2ShHazNeP2f\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x41bbb2c41036ca64b2f6c9e973e8cfaa113ebc42af86702cd0d267f915a7e886\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6bf6699c55e82c7af6ae90b61ea9643ca0c905097da9a31269319f1b5a2a696a\",\"dweb:/ipfs/QmRJZa2UmWcRo6W8JnuomwzfjVtAS21QC8HKggxBhoPsU4\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"keccak256\":\"0x089b533ef30304d4fd8747fe8e329c87ff7be2166cd462b27edd59cd09af79cb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e4835a96531709bd0854203f4acbe62ef66c31bacbcf776a833e15c8b53ef92\",\"dweb:/ipfs/QmckeKRrGEH8x8EnYZPs1M4KM3RDh3YbU7Kk6RhiV38BkU\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6dfb97ce947b7c846b054ee7d45d12383359778f4f3743654ae0a34fa421b26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b97e7e5a77ea47c08ba422291df887eba76c80982f52a6e94a30106e9377a94f\",\"dweb:/ipfs/Qme7N2XRC7mcDxB8wZxNWPk6T8S2qsnmhAqXeUj4CNvsGD\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x2626d8ab3dfdad0fad630c212ad146d59473d0f48b771784c61a7c1dbbea1f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7c144532f1e7c76ac95fb6a8f617c1f740d7a73442a907eb60910e99dfa1fbf\",\"dweb:/ipfs/QmZsGyooD6emxB8JCuugRjnRYS2MPZEL586uuV7dgC8Jng\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xbaf3bd8c64ac943fafde717797ee797c96360586b9448ea25e9872490a6e6858\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bab65b9b5ea0c68e96e1a73460db616042f639d144a6a75595434cfa2a483ed4\",\"dweb:/ipfs/QmUgwEcWXaEu4VSpymiVq8tZYKgA44HPMWZowpg2L8Kiij\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"keccak256\":\"0xbe54004dbe08d943c30e79db6c77d5d9f11915d356b07b5b89331d9503383272\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3c32996f91911872cf5fe4bfc6de2c86cfc2232693ab00bafc46af518189b19e\",\"dweb:/ipfs/QmUCeUd2G1jNVX3MaoJdHtTzprnvwvaYRQBbSDXgmnt3xm\"]},\"node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"keccak256\":\"0x8c378d493cb48c2094bb3a08e0934c9fd9ae2690cab9df12119329c10d585fec\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e14cc78c3210475709c6d0a6ab6ef9a5532acb8467e87ae32d8aea8e687b51fd\",\"dweb:/ipfs/QmfBChjRsdGTuEjjKVyALeXG6mMxXDJtDdHikkyyqMv7uQ\"]},\"node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"keccak256\":\"0x1155a7a1111159f6f90c1eff989301d99ae80f52cbfcdbebbc941d4e78e6ea0e\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://f880a135abf5eb44da2db12ef91621c662b674edda93256977cb2740f728e39f\",\"dweb:/ipfs/QmdKehLeE9Af2Lt92DGXsb1YHiQu9tcQRQQKaAQQZeyQfb\"]},\"node_modules/@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e49bdba6c6013040eb546db3bbceca7d2c8ac86a2c15ff2c85eacd0ed8541271\",\"dweb:/ipfs/QmYa5en1yth7SdJfq9M7mcwDJJvy3996PSEjiwzgH1HvJW\"]},\"src/cross-chain-nft-minter/DestinationMinter.sol\":{\"keccak256\":\"0x80e6112b7141303b964a48aaaaf80467f430a6261e2802e74e1f6a3fd88abc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20f1678297bbe21889d593829152067b748c36c3e2312300026faffb02eecf5e\",\"dweb:/ipfs/QmZogXruJzVFE5K74Y4P17EQGNVbdBcN4AuQRiUJVi9ZdP\"]},\"src/cross-chain-nft-minter/MyNFT.sol\":{\"keccak256\":\"0x6b279507c8ffb5ed7349341d25e7d08438605d70e40e0ba10111c2264d82df93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0213f464750fe7bdbcb477c28a6db5533b9c3a93e5db05cabd3a847da9b6e0a6\",\"dweb:/ipfs/QmZbqeZcke8cKSeiEUYkksbjSDoJcvBRnN4UwETMk3zwkk\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidRouter"
        },
        {
          "inputs": [],
          "type": "event",
          "name": "MintCallSuccessfull",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "struct Client.Any2EVMMessage",
              "name": "message",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "messageId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "sourceChainSelector",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "sender",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "struct Client.EVMTokenAmount[]",
                  "name": "destTokenAmounts",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ]
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "ccipReceive"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRouter",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
            "details": "Note ensure you check the msg.sender is the OffRampRouter",
            "params": {
              "message": "CCIP Message"
            }
          },
          "getRouter()": {
            "returns": {
              "_0": "i_router address"
            }
          },
          "supportsInterface(bytes4)": {
            "params": {
              "interfaceId": "The interfaceId to check"
            },
            "returns": {
              "_0": "true if the interfaceId is supported"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
            "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
          },
          "getRouter()": {
            "notice": "Return the current router"
          },
          "supportsInterface(bytes4)": {
            "notice": "IERC165 supports an interfaceId"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink-testing/=lib/foundry-chainlink-toolkit/lib/chainlink-testing-framework/contracts/ethereum/",
        "@chainlink/contracts-ccip/=node_modules/@chainlink/contracts-ccip/",
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@eth-optimism/=node_modules/@eth-optimism/",
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "@uniswap/=node_modules/@uniswap/",
        "base64-sol/=node_modules/base64-sol/",
        "chainlink-brownie-contracts/=lib/foundry-chainlink-toolkit/lib/chainlink-brownie-contracts/",
        "chainlink-testing-framework/=lib/foundry-chainlink-toolkit/lib/chainlink-testing-framework/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "foundry-chainlink-toolkit/=lib/foundry-chainlink-toolkit/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/cross-chain-nft-minter/DestinationMinter.sol": "DestinationMinter"
      },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648",
        "urls": [
          "bzz-raw://53445dc0431f9b45c06f567c6091da961d4087bec0010cca5bd62100fa624a38",
          "dweb:/ipfs/QmNvBYpBv183czrAqNXr76E8M3LF93ouAJFeAcHfb59Rcx"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
        "urls": [
          "bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
          "dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol": {
        "keccak256": "0x57a2cf3544afc13eba3ad57a4f71d229da29f13ad9c365f31eda05e26a5f810c",
        "urls": [
          "bzz-raw://06c7ba983e1c10b02070776f07495cd28906570923290f193fad3f127d8ecb64",
          "dweb:/ipfs/Qmdb7sqnyafGzbdnzx7GVutiHyMQH9WpKu581sjpCXkwJb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol": {
        "keccak256": "0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c",
        "urls": [
          "bzz-raw://fbfaf37123958822a2720a4ea29651be00edab787540b770f73d3e025d286ff8",
          "dweb:/ipfs/QmbzgWeTm8hJVUqWrNAwFjshqbYVyeGpQA8D1huzxQdmw6"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
        "keccak256": "0xe986ce7671ef4d92b15c9787b48f6cd6688913e8bf595ebc9c094efd8594b7c4",
        "urls": [
          "bzz-raw://490a886c899c11eae93a3d45cfc071058d7009885b645ff552c302aed0b4abbf",
          "dweb:/ipfs/Qma5gTgcbZ4BJjJMWPFDw5c7a6BDDJhUgMF2ShHazNeP2f"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x41bbb2c41036ca64b2f6c9e973e8cfaa113ebc42af86702cd0d267f915a7e886",
        "urls": [
          "bzz-raw://6bf6699c55e82c7af6ae90b61ea9643ca0c905097da9a31269319f1b5a2a696a",
          "dweb:/ipfs/QmRJZa2UmWcRo6W8JnuomwzfjVtAS21QC8HKggxBhoPsU4"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [
          "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
          "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
        "keccak256": "0x089b533ef30304d4fd8747fe8e329c87ff7be2166cd462b27edd59cd09af79cb",
        "urls": [
          "bzz-raw://6e4835a96531709bd0854203f4acbe62ef66c31bacbcf776a833e15c8b53ef92",
          "dweb:/ipfs/QmckeKRrGEH8x8EnYZPs1M4KM3RDh3YbU7Kk6RhiV38BkU"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0xa6dfb97ce947b7c846b054ee7d45d12383359778f4f3743654ae0a34fa421b26",
        "urls": [
          "bzz-raw://b97e7e5a77ea47c08ba422291df887eba76c80982f52a6e94a30106e9377a94f",
          "dweb:/ipfs/Qme7N2XRC7mcDxB8wZxNWPk6T8S2qsnmhAqXeUj4CNvsGD"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0x2626d8ab3dfdad0fad630c212ad146d59473d0f48b771784c61a7c1dbbea1f3f",
        "urls": [
          "bzz-raw://d7c144532f1e7c76ac95fb6a8f617c1f740d7a73442a907eb60910e99dfa1fbf",
          "dweb:/ipfs/QmZsGyooD6emxB8JCuugRjnRYS2MPZEL586uuV7dgC8Jng"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
        "urls": [
          "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
          "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xbaf3bd8c64ac943fafde717797ee797c96360586b9448ea25e9872490a6e6858",
        "urls": [
          "bzz-raw://bab65b9b5ea0c68e96e1a73460db616042f639d144a6a75595434cfa2a483ed4",
          "dweb:/ipfs/QmUgwEcWXaEu4VSpymiVq8tZYKgA44HPMWZowpg2L8Kiij"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
        "urls": [
          "bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
          "dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
        ],
        "license": "MIT"
      },
      "node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
        "keccak256": "0xbe54004dbe08d943c30e79db6c77d5d9f11915d356b07b5b89331d9503383272",
        "urls": [
          "bzz-raw://3c32996f91911872cf5fe4bfc6de2c86cfc2232693ab00bafc46af518189b19e",
          "dweb:/ipfs/QmUCeUd2G1jNVX3MaoJdHtTzprnvwvaYRQBbSDXgmnt3xm"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
        "keccak256": "0x8c378d493cb48c2094bb3a08e0934c9fd9ae2690cab9df12119329c10d585fec",
        "urls": [
          "bzz-raw://e14cc78c3210475709c6d0a6ab6ef9a5532acb8467e87ae32d8aea8e687b51fd",
          "dweb:/ipfs/QmfBChjRsdGTuEjjKVyALeXG6mMxXDJtDdHikkyyqMv7uQ"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
        "keccak256": "0x1155a7a1111159f6f90c1eff989301d99ae80f52cbfcdbebbc941d4e78e6ea0e",
        "urls": [
          "bzz-raw://f880a135abf5eb44da2db12ef91621c662b674edda93256977cb2740f728e39f",
          "dweb:/ipfs/QmdKehLeE9Af2Lt92DGXsb1YHiQu9tcQRQQKaAQQZeyQfb"
        ],
        "license": "BUSL-1.1"
      },
      "node_modules/@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.0/utils/introspection/IERC165.sol": {
        "keccak256": "0xac7a4bfe791ee9fe125cac5cd25795b326433e5cf2bdd6b02ad6ad42c2d126a5",
        "urls": [
          "bzz-raw://e49bdba6c6013040eb546db3bbceca7d2c8ac86a2c15ff2c85eacd0ed8541271",
          "dweb:/ipfs/QmYa5en1yth7SdJfq9M7mcwDJJvy3996PSEjiwzgH1HvJW"
        ],
        "license": "MIT"
      },
      "src/cross-chain-nft-minter/DestinationMinter.sol": {
        "keccak256": "0x80e6112b7141303b964a48aaaaf80467f430a6261e2802e74e1f6a3fd88abc77",
        "urls": [
          "bzz-raw://20f1678297bbe21889d593829152067b748c36c3e2312300026faffb02eecf5e",
          "dweb:/ipfs/QmZogXruJzVFE5K74Y4P17EQGNVbdBcN4AuQRiUJVi9ZdP"
        ],
        "license": "MIT"
      },
      "src/cross-chain-nft-minter/MyNFT.sol": {
        "keccak256": "0x6b279507c8ffb5ed7349341d25e7d08438605d70e40e0ba10111c2264d82df93",
        "urls": [
          "bzz-raw://0213f464750fe7bdbcb477c28a6db5533b9c3a93e5db05cabd3a847da9b6e0a6",
          "dweb:/ipfs/QmZbqeZcke8cKSeiEUYkksbjSDoJcvBRnN4UwETMk3zwkk"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/cross-chain-nft-minter/DestinationMinter.sol",
    "id": 49690,
    "exportedSymbols": {
      "CCIPReceiver": [
        36348
      ],
      "Client": [
        36470
      ],
      "DestinationMinter": [
        49689
      ],
      "MyNFT": [
        49734
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:860:103",
    "nodes": [
      {
        "id": 49631,
        "nodeType": "PragmaDirective",
        "src": "32:23:103",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 49633,
        "nodeType": "ImportDirective",
        "src": "57:99:103",
        "nodes": [],
        "absolutePath": "node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol",
        "file": "@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49690,
        "sourceUnit": 36349,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49632,
              "name": "CCIPReceiver",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36348,
              "src": "65:12:103",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49635,
        "nodeType": "ImportDirective",
        "src": "157:84:103",
        "nodes": [],
        "absolutePath": "node_modules/@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol",
        "file": "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49690,
        "sourceUnit": 36471,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49634,
              "name": "Client",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 36470,
              "src": "165:6:103",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49637,
        "nodeType": "ImportDirective",
        "src": "242:34:103",
        "nodes": [],
        "absolutePath": "src/cross-chain-nft-minter/MyNFT.sol",
        "file": "./MyNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 49690,
        "sourceUnit": 49735,
        "symbolAliases": [
          {
            "foreign": {
              "id": 49636,
              "name": "MyNFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 49734,
              "src": "250:5:103",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 49689,
        "nodeType": "ContractDefinition",
        "src": "454:437:103",
        "nodes": [
          {
            "id": 49643,
            "nodeType": "VariableDeclaration",
            "src": "503:9:103",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "nft",
            "nameLocation": "509:3:103",
            "scope": 49689,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_MyNFT_$49734",
              "typeString": "contract MyNFT"
            },
            "typeName": {
              "id": 49642,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 49641,
                "name": "MyNFT",
                "nameLocations": [
                  "503:5:103"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 49734,
                "src": "503:5:103"
              },
              "referencedDeclaration": 49734,
              "src": "503:5:103",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MyNFT_$49734",
                "typeString": "contract MyNFT"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 49645,
            "nodeType": "EventDefinition",
            "src": "519:28:103",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "a8bcb6a278444293ea5c0bce4a4734a060a5f557bb999d8a57c4f69e96f1fe88",
            "name": "MintCallSuccessfull",
            "nameLocation": "525:19:103",
            "parameters": {
              "id": 49644,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "544:2:103"
            }
          },
          {
            "id": 49662,
            "nodeType": "FunctionDefinition",
            "src": "553:109:103",
            "nodes": [],
            "body": {
              "id": 49661,
              "nodeType": "Block",
              "src": "622:40:103",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 49659,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 49655,
                      "name": "nft",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49643,
                      "src": "632:3:103",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MyNFT_$49734",
                        "typeString": "contract MyNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 49657,
                          "name": "nftAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 49649,
                          "src": "644:10:103",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 49656,
                        "name": "MyNFT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49734,
                        "src": "638:5:103",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_MyNFT_$49734_$",
                          "typeString": "type(contract MyNFT)"
                        }
                      },
                      "id": 49658,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "638:17:103",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_MyNFT_$49734",
                        "typeString": "contract MyNFT"
                      }
                    },
                    "src": "632:23:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_MyNFT_$49734",
                      "typeString": "contract MyNFT"
                    }
                  },
                  "id": 49660,
                  "nodeType": "ExpressionStatement",
                  "src": "632:23:103"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 49652,
                    "name": "router",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 49647,
                    "src": "614:6:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 49653,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 49651,
                  "name": "CCIPReceiver",
                  "nameLocations": [
                    "601:12:103"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 36348,
                  "src": "601:12:103"
                },
                "nodeType": "ModifierInvocation",
                "src": "601:20:103"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 49650,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49647,
                  "mutability": "mutable",
                  "name": "router",
                  "nameLocation": "573:6:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 49662,
                  "src": "565:14:103",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49646,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "565:7:103",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 49649,
                  "mutability": "mutable",
                  "name": "nftAddress",
                  "nameLocation": "589:10:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 49662,
                  "src": "581:18:103",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 49648,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "581:7:103",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "564:36:103"
            },
            "returnParameters": {
              "id": 49654,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "622:0:103"
            },
            "scope": 49689,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 49688,
            "nodeType": "FunctionDefinition",
            "src": "668:221:103",
            "nodes": [],
            "body": {
              "id": 49687,
              "nodeType": "Block",
              "src": "760:129:103",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    49670,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 49670,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "776:7:103",
                      "nodeType": "VariableDeclaration",
                      "scope": 49687,
                      "src": "771:12:103",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 49669,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "771:4:103",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 49679,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 49676,
                          "name": "message",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 49665,
                          "src": "807:7:103",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Any2EVMMessage_$36433_memory_ptr",
                            "typeString": "struct Client.Any2EVMMessage memory"
                          }
                        },
                        "id": 49677,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "815:4:103",
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 36428,
                        "src": "807:12:103",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 49673,
                            "name": "nft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 49643,
                            "src": "797:3:103",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MyNFT_$49734",
                              "typeString": "contract MyNFT"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MyNFT_$49734",
                              "typeString": "contract MyNFT"
                            }
                          ],
                          "id": 49672,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "789:7:103",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 49671,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "789:7:103",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 49674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "789:12:103",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 49675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "802:4:103",
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "src": "789:17:103",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 49678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "789:31:103",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "770:50:103"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 49681,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 49670,
                        "src": "838:7:103",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 49680,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "830:7:103",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 49682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "830:16:103",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 49683,
                  "nodeType": "ExpressionStatement",
                  "src": "830:16:103"
                },
                {
                  "eventCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 49684,
                      "name": "MintCallSuccessfull",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 49645,
                      "src": "861:19:103",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 49685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "861:21:103",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 49686,
                  "nodeType": "EmitStatement",
                  "src": "856:26:103"
                }
              ]
            },
            "baseFunctions": [
              36313
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_ccipReceive",
            "nameLocation": "677:12:103",
            "overrides": {
              "id": 49667,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "751:8:103"
            },
            "parameters": {
              "id": 49666,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 49665,
                  "mutability": "mutable",
                  "name": "message",
                  "nameLocation": "728:7:103",
                  "nodeType": "VariableDeclaration",
                  "scope": 49688,
                  "src": "699:36:103",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Any2EVMMessage_$36433_memory_ptr",
                    "typeString": "struct Client.Any2EVMMessage"
                  },
                  "typeName": {
                    "id": 49664,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 49663,
                      "name": "Client.Any2EVMMessage",
                      "nameLocations": [
                        "699:6:103",
                        "706:14:103"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 36433,
                      "src": "699:21:103"
                    },
                    "referencedDeclaration": 36433,
                    "src": "699:21:103",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Any2EVMMessage_$36433_storage_ptr",
                      "typeString": "struct Client.Any2EVMMessage"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "689:52:103"
            },
            "returnParameters": {
              "id": 49668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "760:0:103"
            },
            "scope": 49689,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 49639,
              "name": "CCIPReceiver",
              "nameLocations": [
                "484:12:103"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 36348,
              "src": "484:12:103"
            },
            "id": 49640,
            "nodeType": "InheritanceSpecifier",
            "src": "484:12:103"
          }
        ],
        "canonicalName": "DestinationMinter",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 49638,
          "nodeType": "StructuredDocumentation",
          "src": "278:175:103",
          "text": " THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\n THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\n DO NOT USE THIS CODE IN PRODUCTION."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          49689,
          36348,
          36592,
          36361
        ],
        "name": "DestinationMinter",
        "nameLocation": "463:17:103",
        "scope": 49690,
        "usedErrors": [
          36329
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 103
}